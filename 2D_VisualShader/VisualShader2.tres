[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://pt5ogm8hp3og"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_i5uw5"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_nbtiw"]
function = 0

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_iqv1c"]
size = Vector2(1030.66, 477.655)
expression = "

vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( vec2(random(uv_index + vec2(0.0,0.0)) ), uv_fract - vec2(0.0,0.0) ),
                     dot( vec2(random(uv_index + vec2(1.0,0.0)) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( vec2(random(uv_index + vec2(0.0,1.0)) ), uv_fract - vec2(0.0,1.0) ),
                     dot( vec2(random(uv_index + vec2(1.0,1.0)) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;
}

float fbm(vec2 uv) {
    int octaves = 6;
    float amplitude = 0.5;
    float frequency = 3.0;
	float value = 0.0;
	
    for(int i = 0; i < octaves; i++) {
        value += amplitude * noise(frequency * uv);
        amplitude *= 0.5;
        frequency *= 2.0;
    }
    return value;
}"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_wo068"]
size = Vector2(528.3, 255.27)
expression = "color = vec4(fbm(UV*(1.0+scale*0.5)));"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_w4jcb"]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_lyetq"]
size = Vector2(606.198, 305.372)
expression = "position = vec2(cos(angle) * radius, sin(angle) * radius);"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_pnnni"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_npm6n"]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;


// Varyings
varying float var_TEST;
varying float var_TEST2;



// GlobalExpression:0
	
	
	vec2 random(vec2 uv){
	    uv = vec2( dot(uv, vec2(127.1,311.7) ),
	               dot(uv, vec2(269.5,183.3) ) );
	    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
	}
	
	float noise(vec2 uv) {
	    vec2 uv_index = floor(uv);
	    vec2 uv_fract = fract(uv);
	
	    vec2 blur = smoothstep(0.0, 1.0, uv_fract);
	
	    return mix( mix( dot( vec2(random(uv_index + vec2(0.0,0.0)) ), uv_fract - vec2(0.0,0.0) ),
	                     dot( vec2(random(uv_index + vec2(1.0,0.0)) ), uv_fract - vec2(1.0,0.0) ), blur.x),
	                mix( dot( vec2(random(uv_index + vec2(0.0,1.0)) ), uv_fract - vec2(0.0,1.0) ),
	                     dot( vec2(random(uv_index + vec2(1.0,1.0)) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;
	}
	
	float fbm(vec2 uv) {
	    int octaves = 6;
	    float amplitude = 0.5;
	    float frequency = 3.0;
		float value = 0.0;
		
	    for(int i = 0; i < octaves; i++) {
	        value += amplitude * noise(frequency * uv);
	        amplitude *= 0.5;
	        frequency *= 2.0;
	    }
	    return value;
	}

void vertex() {
// Input:3
	float n_out3p0 = TIME;


// FloatConstant:4
	float n_out4p0 = 0.000000;


	vec2 n_out2p0;
// Expression:2
	n_out2p0 = vec2(0.0, 0.0);
	{
		n_out2p0 = vec2(cos(n_out3p0) * n_out4p0, sin(n_out3p0) * n_out4p0);
	}


// Output:0
	VERTEX = n_out2p0;


	var_TEST = 0.0;
	var_TEST2 = 0.0;
}

void fragment() {
// Input:7
	vec2 n_out7p0 = UV;


// Input:10
	float n_out10p0 = TIME;


// FloatFunc:11
	float n_out11p0 = sin(n_out10p0);


	vec4 n_out6p0;
// Expression:6
	n_out6p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		n_out6p0 = vec4(fbm(n_out7p0*(1.0+n_out11p0*0.5)));
	}


// Output:0
	COLOR.rgb = vec3(n_out6p0.xyz);


}
"
mode = 1
flags/light_only = false
varyings/TEST = "0,0"
varyings/TEST2 = "0,0"
nodes/vertex/0/position = Vector2(740, 160)
nodes/vertex/2/node = SubResource("VisualShaderNodeExpression_lyetq")
nodes/vertex/2/position = Vector2(-60, 140)
nodes/vertex/2/size = Vector2(606.198, 305.372)
nodes/vertex/2/input_ports = "0,0,angle;1,0,radius;"
nodes/vertex/2/output_ports = "0,3,position;"
nodes/vertex/2/expression = "position = vec2(cos(angle) * radius, sin(angle) * radius);"
nodes/vertex/3/node = SubResource("VisualShaderNodeInput_pnnni")
nodes/vertex/3/position = Vector2(-480, 120)
nodes/vertex/4/node = SubResource("VisualShaderNodeFloatConstant_npm6n")
nodes/vertex/4/position = Vector2(-540, 280)
nodes/vertex/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 2, 0, 0, 0)
nodes/fragment/0/position = Vector2(860, 240)
nodes/fragment/5/node = SubResource("VisualShaderNodeGlobalExpression_iqv1c")
nodes/fragment/5/position = Vector2(-1140, 420)
nodes/fragment/5/size = Vector2(1030.66, 477.655)
nodes/fragment/5/input_ports = ""
nodes/fragment/5/output_ports = ""
nodes/fragment/5/expression = "

vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( vec2(random(uv_index + vec2(0.0,0.0)) ), uv_fract - vec2(0.0,0.0) ),
                     dot( vec2(random(uv_index + vec2(1.0,0.0)) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( vec2(random(uv_index + vec2(0.0,1.0)) ), uv_fract - vec2(0.0,1.0) ),
                     dot( vec2(random(uv_index + vec2(1.0,1.0)) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;
}

float fbm(vec2 uv) {
    int octaves = 6;
    float amplitude = 0.5;
    float frequency = 3.0;
	float value = 0.0;
	
    for(int i = 0; i < octaves; i++) {
        value += amplitude * noise(frequency * uv);
        amplitude *= 0.5;
        frequency *= 2.0;
    }
    return value;
}"
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_wo068")
nodes/fragment/6/position = Vector2(60, 140)
nodes/fragment/6/size = Vector2(528.3, 255.27)
nodes/fragment/6/input_ports = "0,3,UV;1,0,scale;"
nodes/fragment/6/output_ports = "0,5,color;"
nodes/fragment/6/expression = "color = vec4(fbm(UV*(1.0+scale*0.5)));"
nodes/fragment/7/node = SubResource("VisualShaderNodeInput_w4jcb")
nodes/fragment/7/position = Vector2(-320, 180)
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_i5uw5")
nodes/fragment/10/position = Vector2(-500, 260)
nodes/fragment/11/node = SubResource("VisualShaderNodeFloatFunc_nbtiw")
nodes/fragment/11/position = Vector2(-180, 260)
nodes/fragment/connections = PackedInt32Array(7, 0, 6, 0, 6, 0, 0, 0, 10, 0, 11, 0, 11, 0, 6, 1)
